NEXT STEPS
[x] Make sure you can deploy it
[x] Cache Headers
[x] Indexes (player name, etc)
[x] Write AI bots!
    [x] Rat
    [x] Orc
    [x] more!
[ ] Documentation
[ ] Image Picker
[ ] Try playing the game, and publish to friends
[ ] Highlight the bot in the game when you click on the leaderboard
    [ ] don't focus out the board. "SELECT" him, and then you can track him
[ ] Change leaderboards to use normal /objects call. It'll save bandwidth, no? (not really). It'll update more frequently, the browser doesn't have THAT much to do
[x] Death animation SPLAT
[ ] Death animation (remove white background)
[ ] Sort actions randomly (there's always a chance you'll get away!). Double KO is much easier. (Bot commands go through!)
    [ ] No, don't use double KO. Whoever goes first wins. and that's random :) (or based on bot SPEED) (ooh!)
[ ] Change leaderboards to be permanant with rollover (minute, hour, day, month, year, etc) (top 5 in each?)
[ ] Limit survivors list to 10
[ ] Stats sheet always says 0 kills
[ ] Different "halos" depending on alignment
[ ] Wrong monster when you click on rats (from the line above??)

ALPHA / FRIENDS RELEASE
[ ] Queue up commands. You CAN'T remove old ones
[ ] Varnish (make sure it works)

REAL RELEASE
[ ] Real domain 
[ ] Blog post? (no, internal release first)
[ ] Gzip?
[ ] Spawn limit
[-] Tighten up /game/objects

DONE
[x] Get the leaderboards to display (and refresh?)
[x] Click on bot for information
[x] API: pick your own image
[x] Leaderboard: top killers
[x] Leaderboard: link to bot overlay (url based?)
[x] Game Timer: Make a monad!

IDEAS
[ ] Have a store. Collect coins, not powerups. BUY powerups. Multiple kinds of powerfuls (Gold, Crystal)
[ ] Powerups: shoot 2 spaces. Multiple actions per actions
[ ] Have spawning guys be a resource of some kind. Kills or money let you spawn. start with 1, you can spend 1 spawn any time something dies.
[ ] Multiple types of creeps: Troll, vs little animals. They use different AI/strategy. Worth different amounts of money.
[ ] Blocks - requires belt of giant strength. stone requires belt of awesome giant strength
[ ] Trading
[ ] If you die you lose all your gold, so you have an incentive to drop it.


HOW TO WRITE MY AI BOTS
In node?
In haskell? (might as well. Should be fun, eh?)
    -- could I use the same objects?
    -- not really. I need a different ToJSON and FromJSON implementation
    -- well, I could map them to another object. Use a BotRequest and BotResponse object. Then I could just genericize them
    -- BotDocument (does it have a generic serializer)? Writing converters can't be any harder than writing parsers, etc
        -- it would be FASTER though

    HTTP request library would have to be good, but I could get it nice pretty quickly. 
    Might be kind of hard to do

    Would be less useful as a teaching tool
    Could do it faster in coffeescript

AI BOTS IN NATIVE HASKELL
    
What if the AI bots were implemented on the server?
    Would be much more performant
    Easier to deploy
    Could use my existing monads, etc
    Less useful as a teaching tool
    
    I'm going to need to implement some server-side logic anyway
  
    I could cheat (allow more spawns, etc)
    
    Might be harder in some respects: I wouldn't automatically have everything in place. 

    I would like to TRY to write it in haskell. no? why not?

    Try implementing them on the server?

Implement them normally. It's cool. 
    Use coffeescript
    Make it AWESOME
    
    • use a single controller
    • keep track of your guys
    • have it all in an app
    
